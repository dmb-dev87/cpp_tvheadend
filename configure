#!/bin/bash
#
# Tvheadend configure script
#
# Copyright (c) 2005-2009 Andreas Ã–man
#
# Based on FFmpeg's configure script:
#
# Copyright (c) 2000-2002 Fabrice Bellard
# Copyright (c) 2005-2008 Diego Biurrun
# Copyright (c) 2005-2008 Mans Rullgard
#



TOPDIR=`cd $(dirname $0) && pwd`
TMPDIR=${TOPDIR}/tmp
RELEASENAME=`head -n1 ${TOPDIR}/../ChangeLog | awk '{print $2}' | sed s/\(// | sed s/\)//`

CONFIG_LIST="
embedded_ffmpeg
"

set_all(){
    value=$1
    shift
    for var in $*; do
        eval $var=$value
    done
}

enable(){
    set_all yes $*
}

disable(){
    set_all no $*
}


enabled(){
    test "${1#!}" = "$1" && op== || op=!=
    eval test "x\$${1#!}" $op "xyes"
}

toupper(){
    echo "$@" | tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
}

print_config(){
    pfx=$1
    header=$2
    makefile=$3
    shift 3
    for cfg; do
        ucname="`toupper $cfg`"
        if enabled $cfg; then
            echo "#define ${pfx}${ucname} 1" >> $header
            echo "#define ENABLE_${ucname} 1" >> $header
            echo "${pfx}${ucname}=yes" >> $makefile
        else
            echo "#define ENABLE_${ucname} 0" >> $header
        fi
    done
}


CONFIG_H=${TOPDIR}/config.h
CONFIG_MAK=${TOPDIR}/config.mak
CPU=generic
RELEASE=no
PREFIX=/usr/local

cat > ${CONFIG_MAK} << EOF 
# Automatically generated by configure, do not edit
TOPDIR=${TOPDIR}
EOF

cat > ${CONFIG_H} << EOF
/* Automatically generated by configure, do not edit */
EOF




  
show_help(){
  echo "Usage: configure [options]"
  echo "Options: [defaults in brackets after descriptions]"
  echo
  echo "Standard options:"
  echo "  --help                   print this message"
  echo "  --prefix=PREFIX          install in PREFIX [$PREFIX]"
  echo "  --arch=arch              Build for this architecture [$ARCH]"
  echo "  --cpu=cpu                Build and optimize for specific CPU"
  echo "  --cc=CC                  Build using the given compiler"
  echo "  --release                Stage for release"
  echo "  --embed-ffmpeg           Download, compile and link with FFmpeg libraries"
  exit 1
}


die() {
    rm -rf ${TMPDIR}
    exit
}


for opt do
  optval="${opt#*=}"
  case "$opt" in
  --prefix=*) PREFIX="$optval"; RELEASE=yes;
  ;;
  --cpu=*) CPU="$optval"
  ;;
  --help) show_help
  ;;
  --release) RELEASE=yes;
  ;;
  --cc=*) CC="$optval"
  ;;
  --embed-ffmpeg) enable embedded_ffmpeg;
  ;;
  esac
done


mkdir -p ${TMPDIR}

#
# c compiler
#
checkcc() {
    cat >${TMPDIR}/1.c <<EOF
int main() {
 return 0;
}
EOF
    $CC 2>/dev/null ${TMPDIR}/1.c -o ${TMPDIR}/1.bin 
}
    

if [ "x$CC" != "x" ]; then
    echo >${CONFIG_MAK} "CC=$CC"
    CC_FFMPEG="--cc=$CC"
else
    CC=cc
fi

if checkcc; then 
    echo "Using C compiler: $CC"
else
    echo "C compiler ($CC) is not working"
    die
fi

echo >>${CONFIG_MAK} $CC_CONFIG_MAK 


fatal() {
    echo $1
    die
}


#
# Determine how to link with FFmpeg
#
if enabled embedded_ffmpeg; then 

    rm -rf ${TOPDIR}/ffmpeg*

    mkdir ffmpeg

    which >/dev/null wget || fatal "command 'wget' not found"
    (cd ${TOPDIR}/ffmpeg && wget http://www.ffmpeg.org/releases/ffmpeg-0.5.tar.bz2)

    which >/dev/null bunzip2 || fatal "command 'bunzip2' not found"
    (cd ${TOPDIR}/ffmpeg && bunzip2 ffmpeg-0.5.tar.bz2)

    (cd ${TOPDIR}/ffmpeg && tar xf ffmpeg-0.5.tar)

    (cd ${TOPDIR}/ffmpeg/ffmpeg-0.5 && ./configure \
    --cpu=${CPU} \
    --disable-encoders \
    --enable-encoder=mp2 \
    --enable-encoder=mpeg2video \
    --disable-muxers \
    --enable-muxer=matroska \
    --disable-decoders \
    --enable-decoder=mp2 \
    --enable-decoder=mpeg2video \
    --enable-decoder=h264 \
    --disable-demuxers \
    --disable-protocols \
    --disable-filters \
    --disable-devices \
    --disable-stripping \
    --enable-static \
    --disable-shared \
    --enable-pthreads \
    --prefix=${TOPDIR}/ffmpeg \
    --disable-ffserver \
	)

    (cd ${TOPDIR}/ffmpeg/ffmpeg-0.5 && make all install)
    
    echo >>${CONFIG_MAK} LDFLAGS+= -L${TOPDIR}/ffmpeg/lib -lavformat -lavcodec -lavutil
    echo >>${CONFIG_MAK} CFLAGS+=-I${TOPDIR}/ffmpeg/include

else
#
# External FFmpeg
#

#
# pkgconfig
#
    which >/dev/null pkg-config
    if [ $? -ne 0 ]; then
	echo "pkg-config not found. Can not configure."
	die
    fi
    
#
# Verify that we are build to correct ffmpeg libraries
#
    LAVC_REQUIRED="52.20.0"
    LAVF_REQUIRED="52.31.0"
    LAVU_REQUIRED="49.15.0"
    
    ffmpegerr() {
	echo Fatal error: $1
	echo
	echo Tvheadend expects to be linked against the FFmpeg 0.5 release.
	echo If this is not available on your system you can either install
	echo it from http://www.ffmpeg.org/download.html or ask configure
	echo to build it and statically link it to tvheadend.
	echo To do this use the --embed-ffmpeg option.
	die
    }
    
    pkg-config libavcodec  || ffmpegerr "libavcodec not installed"
    pkg-config libavformat || ffmpegerr "libavformat not installed"
    pkg-config libavutil   || ffmpegerr "libavutil not installed"
    pkg-config --exact-version $LAVC_REQUIRED libavcodec  || ffmpegerr "libavcodec incorrect version"
    pkg-config --exact-version $LAVF_REQUIRED libavformat || ffmpegerr "libavformat incorrect version"
    pkg-config --exact-version $LAVU_REQUIRED libavutil   || ffmpegerr "libavutil incorrect version"

    cat >>${CONFIG_MAK} <<EOF
CFLAGS+=`pkg-config --cflags libavformat`
CFLAGS+=`pkg-config --cflags libavcodec`
CFLAGS+=`pkg-config --cflags libavutil`

LDFLAGS+=`pkg-config --libs libavformat`
LDFLAGS+=`pkg-config --libs libavcodec`
LDFLAGS+=`pkg-config --libs libavutil`
EOF
    
    echo Using FFmpeg libavcodec version: `pkg-config --modversion libavcodec`
    echo Using FFmpeg libavformat version: `pkg-config --modversion libavformat`
    echo Using FFmpeg libavutil version: `pkg-config --modversion libavutil`
fi    


#
# Configure built-in file search paths
#
echo

if [ ${RELEASE} = yes ]; then
    echo  Release build: ${RELEASENAME}
    echo  The generated binaries will contained compild-in paths to
    echo  ${PREFIX}/share/hts where parts of the software will be installed.
    echo  You must '"make install"' for HTS to function properly.
else
    echo  Development build. 
    echo  The generated binaries will contained compild-in paths to
    echo  the current build tree. If you plan to install the binaries,
    echo  please reconfigure with '--release'.
fi


if [ ${RELEASE} = yes ]; then
    echo >>${CONFIG_H} "#define HTS_RELEASE_TAG \"${RELEASENAME}\""
    echo >>${CONFIG_H} "#define HTS_INSTALL_PREFIX \"${PREFIX}\""
    echo >>${CONFIG_H} "#define TVHEADEND_CONTENT_PATH \"${PREFIX}/share/hts/tvheadend\""
else
    echo >>${CONFIG_H} "#define TVHEADEND_CONTENT_PATH \"${TOPDIR}/src\""
fi

echo >>${CONFIG_MAK} prefix=${PREFIX}

print_config CONFIG_ ${CONFIG_H} ${CONFIG_MAK} $CONFIG_LIST

die

